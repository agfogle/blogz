from flask import Flask, request, redirect, render_template
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['DEBUG']=True
# This is the connection string to connect to database
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://build-a-blog:testblog@localhost:8889/build-a-blog'
# This will show the SQL commands that get generated by SQLAlchemy
app.config['SQLALCHEMY_ECHO'] = True
db = SQLAlchemy(app) 
# creates a database object that can be used within the app



# create a persistant class to store data in database. This represents app data that we want
# to store within our database
class Blog(db.Model):
    id = db.Column(db.Integer, primary_key=True) 
    # gives each blog post a unique identifier
    title = db.Column(db.Text(120)) 
    # this is where the title of each blog post will be stored
    body = db.Column(db.Text(250)) 
    # this is where the body of each post will be stored
    
    def __init__(self, title, body):
        self.title = title
        self.body = body

# Dummy data to test visual functionality
# blogs = [
#     {
#         'title': 'Blog Post #1',
#         'body': 'This is my first blog'
#     },
#     {
#         'title': 'Blog Post #2',
#         'body': 'This is my second blog'
#     }
# ]

@app.route('/blog')
def index():
    blogs = Blog.query.all()
    return render_template('blog.html', blogs=blogs)


@app.route('/newpost', methods=['GET','POST'])
def new_post():
    if request.method == 'GET':
        return render_template('newpost.html')

    if request.method == 'POST':
        blog_title = request.form['title']
        blog_body = request.form['body']
        new_blog = Blog(blog_title,blog_body)
        db.session.add(new_blog)
        db.session.commit()

        return redirect('/blog')


        # title_error = ''
        # body_error = ''

        # if blog_title == "":
        #     title_error = "This field can not be blank"
        # elif blog_body == "":
        #     body_error = "This field can not be blank"

        # if not title_error and not body_error:
        #     render_template('blog.html')  
        # else:
        #     return render_template('newpost.html', blog_title=blog_title, title_error=title_error, blog_body=blog_body, body_error=body_error)
    



if __name__ =='__main__':
    app.run()